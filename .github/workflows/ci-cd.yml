name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: pill_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black
    
    - name: Code formatting check
      run: |
        black --check app/ --diff || echo "Code formatting issues found, but continuing..."
        flake8 app/ --max-line-length=88 --extend-ignore=E203,W503 || echo "Linting issues found, but continuing..."
      continue-on-error: true
    
    - name: Set up environment variables
      run: |
        echo "LINE_CHANNEL_ACCESS_TOKEN=test_token" >> $GITHUB_ENV
        echo "LINE_CHANNEL_SECRET=test_secret" >> $GITHUB_ENV
        echo "GEMINI_API_KEY=test_key" >> $GITHUB_ENV
        echo "DB_HOST=127.0.0.1" >> $GITHUB_ENV
        echo "DB_USER=root" >> $GITHUB_ENV
        echo "DB_PASS=testpassword" >> $GITHUB_ENV
        echo "DB_NAME=pill_test" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key" >> $GITHUB_ENV
        echo "YOUR_BOT_ID=@test_bot" >> $GITHUB_ENV
        echo "LIFF_CHANNEL_ID=test_liff" >> $GITHUB_ENV
    
    - name: Wait for MySQL
      run: |
        timeout 60 bash -c 'until mysqladmin ping -h"127.0.0.1" -P"3306" -uroot -ptestpassword --silent; do sleep 1; done'
    
    - name: Run tests
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
      continue-on-error: true
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        pip install bandit safety
    
    - name: Run Bandit Security Scan
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ -f txt || echo "Security issues found, but continuing..."
      continue-on-error: true
    
    - name: Run Safety Check
      run: |
        safety check --json --output safety-report.json || true
        safety check || echo "Dependency vulnerabilities found, but continuing..."
      continue-on-error: true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: |
          bandit-report.json
          safety-report.json

  docker-build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t linebot-app:test .
      continue-on-error: false
    
    - name: Test Docker image
      run: |
        docker run --rm -d --name test-container -p 8080:8080 \
          -e LINE_CHANNEL_ACCESS_TOKEN=test \
          -e LINE_CHANNEL_SECRET=test \
          -e GEMINI_API_KEY=test \
          -e SECRET_KEY=test \
          -e YOUR_BOT_ID=@test \
          -e LIFF_CHANNEL_ID=test \
          -e DB_HOST=localhost \
          -e DB_USER=test \
          -e DB_PASS=test \
          -e DB_NAME=test \
          -e DB_PORT=3306 \
          linebot-app:test
        sleep 15
        curl -f http://localhost:8080/health || exit 1
        docker stop test-container
      continue-on-error: true

  deploy-staging:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Check APIs (skip if permission denied)
      run: |
        gcloud services enable cloudbuild.googleapis.com || echo "API already enabled or permission denied"
        gcloud services enable containerregistry.googleapis.com || echo "API already enabled or permission denied"
      continue-on-error: true
    
    - name: Build and deploy to staging
      run: |
        gcloud run deploy linebot-app-staging \
          --source . \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --set-env-vars="LINE_CHANNEL_ACCESS_TOKEN=${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}" \
          --set-env-vars="LINE_CHANNEL_SECRET=${{ secrets.LINE_CHANNEL_SECRET }}" \
          --set-env-vars="YOUR_BOT_ID=${{ secrets.YOUR_BOT_ID }}" \
          --set-env-vars="LIFF_CHANNEL_ID=${{ secrets.LIFF_CHANNEL_ID }}" \
          --set-env-vars="LIFF_ID_CAMERA=${{ secrets.LIFF_ID_CAMERA }}" \
          --set-env-vars="LIFF_ID_EDIT=${{ secrets.LIFF_ID_EDIT }}" \
          --set-env-vars="LIFF_ID_PRESCRIPTION_REMINDER=${{ secrets.LIFF_ID_PRESCRIPTION_REMINDER }}" \
          --set-env-vars="LIFF_ID_MANUAL_REMINDER=${{ secrets.LIFF_ID_MANUAL_REMINDER }}" \
          --set-env-vars="LIFF_ID_HEALTH_FORM=${{ secrets.LIFF_ID_HEALTH_FORM }}" \
          --set-env-vars="LINE_LOGIN_CHANNEL_ID=${{ secrets.LINE_LOGIN_CHANNEL_ID }}" \
          --set-env-vars="LINE_LOGIN_CHANNEL_SECRET=${{ secrets.LINE_LOGIN_CHANNEL_SECRET }}" \
          --set-env-vars="GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" \
          --set-env-vars="DB_HOST=${{ secrets.DB_HOST }}" \
          --set-env-vars="DB_USER=${{ secrets.DB_USER }}" \
          --set-env-vars="DB_PASS=${{ secrets.DB_PASS }}" \
          --set-env-vars="DB_NAME=${{ secrets.DB_NAME }}" \
          --set-env-vars="DB_PORT=${{ secrets.DB_PORT }}" \
          --set-env-vars="SECRET_KEY=${{ secrets.SECRET_KEY }}" \
          --set-env-vars="REMINDER_SECRET_TOKEN=${{ secrets.REMINDER_SECRET_TOKEN }}"
    

  deploy-production:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Check APIs (skip if permission denied)
      run: |
        gcloud services enable cloudbuild.googleapis.com || echo "API already enabled or permission denied"
        gcloud services enable containerregistry.googleapis.com || echo "API already enabled or permission denied"
      continue-on-error: true
    
    - name: Build and deploy to production
      run: |
        gcloud run deploy linebot-app \
          --source . \
          --platform managed \
          --region us-central1 \
          --allow-unauthenticated \
          --set-env-vars="LINE_CHANNEL_ACCESS_TOKEN=${{ secrets.LINE_CHANNEL_ACCESS_TOKEN }}" \
          --set-env-vars="LINE_CHANNEL_SECRET=${{ secrets.LINE_CHANNEL_SECRET }}" \
          --set-env-vars="YOUR_BOT_ID=${{ secrets.YOUR_BOT_ID }}" \
          --set-env-vars="LIFF_CHANNEL_ID=${{ secrets.LIFF_CHANNEL_ID }}" \
          --set-env-vars="LIFF_ID_CAMERA=${{ secrets.LIFF_ID_CAMERA }}" \
          --set-env-vars="LIFF_ID_EDIT=${{ secrets.LIFF_ID_EDIT }}" \
          --set-env-vars="LIFF_ID_PRESCRIPTION_REMINDER=${{ secrets.LIFF_ID_PRESCRIPTION_REMINDER }}" \
          --set-env-vars="LIFF_ID_MANUAL_REMINDER=${{ secrets.LIFF_ID_MANUAL_REMINDER }}" \
          --set-env-vars="LIFF_ID_HEALTH_FORM=${{ secrets.LIFF_ID_HEALTH_FORM }}" \
          --set-env-vars="LINE_LOGIN_CHANNEL_ID=${{ secrets.LINE_LOGIN_CHANNEL_ID }}" \
          --set-env-vars="LINE_LOGIN_CHANNEL_SECRET=${{ secrets.LINE_LOGIN_CHANNEL_SECRET }}" \
          --set-env-vars="GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" \
          --set-env-vars="DB_HOST=${{ secrets.DB_HOST }}" \
          --set-env-vars="DB_USER=${{ secrets.DB_USER }}" \
          --set-env-vars="DB_PASS=${{ secrets.DB_PASS }}" \
          --set-env-vars="DB_NAME=${{ secrets.DB_NAME }}" \
          --set-env-vars="DB_PORT=${{ secrets.DB_PORT }}" \
          --set-env-vars="SECRET_KEY=${{ secrets.SECRET_KEY }}" \
          --set-env-vars="REMINDER_SECRET_TOKEN=${{ secrets.REMINDER_SECRET_TOKEN }}"
    
    
    - name: Notify deployment success
      run: |
        echo "ðŸš€ Production deployment successful!"
        echo "Service URL: $(gcloud run services describe linebot-app --region=us-central1 --format='value(status.url)')"